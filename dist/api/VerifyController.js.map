{"version":3,"sources":["../../src/api/VerifyController.js"],"names":["logger","Logger","getLogger","routes","use","bodyParser","json","get","req","res","status","post","Promise","all","db","verifyBasic","body","basic","verifyPhone","phone","verifySocial","social","then","results","values","i","length","result","type","success","catch","err","error","verifySkill","skill","verifyTech","tech","technologies","verifyRepo","repositories","technology","repository","verifyExperience","experience","verifyEducation","education","verifyPapers","papers","paper","verifyAchievements","other","achievement","verifyInterests","interest"],"mappings":"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","sourceRoot":"start.js","sourcesContent":["import Logger from '../helpers/logger';\r\nimport { Router } from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport db from '../database/verifyDatabase';\r\n\r\nconst logger = Logger.getLogger('api');\r\nconst routes = Router();\r\n\r\nroutes.use(bodyParser.json());\r\n\r\nroutes.get('/', function (req, res) {\r\n\tres.status(200).json('Nothing to see here!');\r\n});\r\n\r\nroutes.post('/', function (req, res) {\r\n\tres.status(200).json('This is all good and all, but what do you want me to do with that data.');\r\n});\r\n\r\nroutes.post('/basic', function (req, res) {\r\n    Promise.all([\r\n        db.verifyBasic(req.body.basic.basic),\r\n        db.verifyPhone(req.body.basic.phone),\r\n        db.verifySocial(req.body.basic.social)\r\n    ]).then((results) => {\r\n        const values = {\r\n            basic: null,\r\n            phone: null,\r\n            social: null\r\n        };\r\n\r\n        for (let i = 0; i < results.length; i++) {\r\n            const result = results[i];\r\n\r\n            switch (result.type) {\r\n                case 'basic':\r\n                    values.basic = result.result;\r\n                    break;\r\n                case 'phone':\r\n                    values.phone = result.result;\r\n                    break;\r\n                case 'social':\r\n                    values.social = result.result;\r\n                    break;\r\n            }\r\n\r\n            if (i == (results.length - 1)) {\r\n                res.status(200).json({\r\n                    success: true,\r\n                    results: values\r\n                });\r\n            }\r\n        }\r\n    }).catch((err) => {\r\n        logger.error(err);\r\n        res.status(500).json({\r\n            success: false,\r\n            err: err\r\n        });\r\n    });\r\n});\r\n\r\nroutes.post('/skill', function (req, res) {\r\n    db.verifySkill(req.body.skill).then((results) => {\r\n        res.status(200).json({\r\n            success: true,\r\n            results: results.result\r\n        });\r\n    }).catch((err) => {\r\n        logger.error(err);\r\n        res.status(500).json({\r\n            success: false,\r\n            err: err\r\n        });\r\n    });\r\n});\r\n\r\nroutes.post('/tech', function (req, res) {\r\n    Promise.all([\r\n        db.verifyTech(req.body.tech.technologies),\r\n        db.verifyRepo(req.body.tech.repositories)\r\n    ]).then((results) => {\r\n        const values = {\r\n            technology: null,\r\n            repository: null\r\n        }\r\n\r\n        for (let i = 0; i < results.length; i++) {\r\n            const result = results[i];\r\n\r\n            switch (result.type) {\r\n                case 'technology':\r\n                    values.technology = result.result;\r\n                    break;\r\n                case 'repository':\r\n                    values.repository = result.result;\r\n                    break;\r\n            }\r\n\r\n            if (i == (results.length - 1)) {\r\n                res.status(200).json({\r\n                    success: true,\r\n                    results: values\r\n                });\r\n            }\r\n        }\r\n    }).catch((err) => {\r\n        logger.error(err);\r\n        res.status(500).json({\r\n            success: false,\r\n            err: err\r\n        });\r\n    });\r\n});\r\n\r\nroutes.post('/experience', function (req, res) {\r\n    db.verifyExperience(req.body.experience).then((results) => {\r\n        res.status(200).json({\r\n            success: true,\r\n            results: results.result\r\n        });\r\n    }).catch((err) => {\r\n        logger.error(err);\r\n        res.status(500).json({\r\n            success: false,\r\n            err: err\r\n        });\r\n    });\r\n});\r\n\r\nroutes.post('/education', function (req, res) {\r\n    Promise.all([\r\n        db.verifyEducation(req.body.education.education),\r\n        db.verifyPapers(req.body.education.papers)\r\n    ]).then((results) => {\r\n        const values = {\r\n            education: null,\r\n            paper: null\r\n        }\r\n\r\n        for (let i = 0; i < results.length; i++) {\r\n            const result = results[i];\r\n\r\n            switch (result.type) {\r\n                case 'education':\r\n                    values.education = result.result;\r\n                    break;\r\n                case 'paper':\r\n                    values.paper = result.result;\r\n                    break;\r\n            }\r\n\r\n            if (i == (results.length - 1)) {\r\n                res.status(200).json({\r\n                    success: true,\r\n                    results: values\r\n                });\r\n            }\r\n        }\r\n    }).catch((err) => {\r\n        logger.error(err);\r\n        res.status(500).json({\r\n            success: false,\r\n            err: err\r\n        });\r\n    });\r\n});\r\n\r\nroutes.post('/other', function (req, res) {\r\n    Promise.all([\r\n        db.verifyAchievements(req.body.other.achievement),\r\n        db.verifyInterests(req.body.other.interest)\r\n    ]).then((results) => {\r\n        const values = {\r\n            achievement: null,\r\n            interest: null\r\n        }\r\n\r\n        for (let i = 0; i < results.length; i++) {\r\n            const result = results[i];\r\n\r\n            switch (result.type) {\r\n                case 'achievement':\r\n                    values.achievement = result.result;\r\n                    break;\r\n                case 'interest':\r\n                    values.interest = result.result;\r\n                    break;\r\n            }\r\n\r\n            if (i == (results.length - 1)) {\r\n                res.status(200).json({\r\n                    success: true,\r\n                    results: values\r\n                });\r\n            }\r\n        }\r\n    }).catch((err) => {\r\n        logger.error(err);\r\n        res.status(500).json({\r\n            success: false,\r\n            err: err\r\n        });\r\n    });\r\n});\r\n\r\nexport default routes;"],"file":"VerifyController.js"}