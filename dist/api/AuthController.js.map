{"version":3,"sources":["../../src/api/AuthController.js"],"names":["auth","Auth","routes","use","bodyParser","json","get","req","res","status","post","body","username","password","db","login","then","user","payload","id","results","options","expiresIn","issuer","subject","audience","token","jwt","sign","debug","jwtSecret","process","env","JWT_SECRET","success","catch","err","result","sendStatus","authenticate"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,IAAI,GAAG,IAAIC,aAAJ,EAAb;AAEA,IAAMC,MAAM,GAAG,sBAAf;AAEAA,MAAM,CAACC,GAAP,CAAWC,oBAAWC,IAAX,EAAX;AAEAH,MAAM,CAACI,GAAP,CAAW,GAAX,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACnCA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,sBAArB;AACA,CAFD;AAIAH,MAAM,CAACQ,IAAP,CAAY,GAAZ,EAAiB,UAAUH,GAAV,EAAeC,GAAf,EAAoB;AACpCA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,yEAArB;AACA,CAFD;AAIAH,MAAM,CAACQ,IAAP,CAAY,QAAZ,EAAsB,UAAUH,GAAV,EAAeC,GAAf,EAAoB;AAAA,kBACPD,GAAG,CAACI,IADG;AAAA,MAC9BC,QAD8B,aAC9BA,QAD8B;AAAA,MACpBC,QADoB,aACpBA,QADoB;;AAGtC,MAAID,QAAQ,IAAIC,QAAhB,EAA0B;AACtBC,0BAAGC,KAAH,CAASH,QAAT,EAAmBC,QAAnB,EAA6BG,IAA7B,CAAkC,UAAAC,IAAI,EAAI;AACtC,UAAIA,IAAJ,EAAU;AACN,YAAMC,OAAO,GAAG;AACZC,UAAAA,EAAE,EAAEF,IAAI,CAACG,OAAL,CAAaD,EADL;AAEZP,UAAAA,QAAQ,EAAEA;AAFE,SAAhB;AAKA,YAAMS,OAAO,GAAG;AACZC,UAAAA,SAAS,EAAE,IADC;AAEZC,UAAAA,MAAM,EAAE,0BAFI;AAGZC,UAAAA,OAAO,EAAEZ,QAHG;AAIZa,UAAAA,QAAQ,EAAE;AAJE,SAAhB;;AAOA,YAAMC,KAAK,GAAGC,sBAAIC,IAAJ,CAASV,OAAT,EAAkBW,gBAAOC,iBAAP,GAAmBC,OAAO,CAACC,GAAR,CAAYC,UAAjD,EAA6DZ,OAA7D,CAAd;;AAEAb,QAAAA,GAAG,CAACH,IAAJ,CAAS;AACL6B,UAAAA,OAAO,EAAE,IADJ;AAELR,UAAAA,KAAK,EAAEA;AAFF,SAAT;AAIH;AACJ,KArBD,EAqBGS,KArBH,CAqBS,UAAAC,GAAG,EAAI;AACZ5B,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AACjB6B,QAAAA,OAAO,EAAE,KADQ;AAEjBG,QAAAA,MAAM,EAAED;AAFS,OAArB;AAIH,KA1BD;AA2BH,GA5BD,MA4BO;AACH5B,IAAAA,GAAG,CAAC8B,UAAJ,CAAe,GAAf,EAAoBjC,IAApB,CAAyB;AACrB6B,MAAAA,OAAO,EAAE,KADY;AAErBG,MAAAA,MAAM,EAAE;AAFa,KAAzB;AAIH;AACJ,CArCD;AAuCAnC,MAAM,CAACI,GAAP,CAAW,cAAX,EAA2BN,IAAI,CAACuC,YAAL,EAA3B,EAAgD,UAAUhC,GAAV,EAAeC,GAAf,EAAoB;AAChEA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,IAArB;AACH,CAFD;eAIeH,M","sourceRoot":"start.js","sourcesContent":["import { debug, jwtSecret } from '../config/config';\r\nimport Auth from '../helpers/auth';\r\nimport { Router } from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport db from '../database/authDatabase';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst auth = new Auth();\r\n\r\nconst routes = Router();\r\n\r\nroutes.use(bodyParser.json());\r\n\r\nroutes.get('/', function (req, res) {\r\n\tres.status(200).json('Nothing to see here!');\r\n});\r\n\r\nroutes.post('/', function (req, res) {\r\n\tres.status(200).json('This is all good and all, but what do you want me to do with that data.');\r\n});\r\n\r\nroutes.post('/login', function (req, res) {\r\n    const { username, password } = req.body;\r\n    \r\n    if (username && password) {\r\n        db.login(username, password).then(user => {\r\n            if (user) {\r\n                const payload = {\r\n                    id: user.results.id,\r\n                    username: username\r\n                };\r\n\r\n                const options = {\r\n                    expiresIn: '3h',\r\n                    issuer: 'TheDashCoder - DigitalCV',\r\n                    subject: username,\r\n                    audience: 'http://thedashcoder.online'\r\n                }\r\n\r\n                const token = jwt.sign(payload, debug? jwtSecret : process.env.JWT_SECRET, options);\r\n\r\n                res.json({\r\n                    success: true,\r\n                    token: token\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            res.status(401).json({\r\n                success: false,\r\n                result: err\r\n            });\r\n        });\r\n    } else {\r\n        res.sendStatus(401).json({\r\n            success: false,\r\n            result: 'Missing Username/Password.'\r\n        });\r\n    }\r\n});\r\n\r\nroutes.get('/check-login', auth.authenticate(), function (req, res) {\r\n    res.status(200).json(true);\r\n});\r\n\r\nexport default routes;"],"file":"AuthController.js"}