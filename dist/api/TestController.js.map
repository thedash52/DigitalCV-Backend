{"version":3,"sources":["../../src/api/TestController.js"],"names":["logger","Logger","getLogger","routes","use","bodyParser","json","get","req","res","status","post","fm","testStorageAuth","then","result","length","send","warn","catch","err","error","testResults","connection","database","db","checkDatabase"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAGC,gBAAOC,SAAP,CAAiB,KAAjB,CAAf;;AACA,IAAMC,MAAM,GAAG,sBAAf;AAEAA,MAAM,CAACC,GAAP,CAAWC,oBAAWC,IAAX,EAAX;AAEAH,MAAM,CAACI,GAAP,CAAW,GAAX,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACnCA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,sBAArB;AACA,CAFD;AAIAH,MAAM,CAACQ,IAAP,CAAY,GAAZ,EAAiB,UAAUH,GAAV,EAAeC,GAAf,EAAoB;AACpCA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,yEAArB;AACA,CAFD;AAIAH,MAAM,CAACI,GAAP,CAAW,eAAX,EAA4B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC/CG,uBAAGC,eAAH,GAAqBC,IAArB,CAA0B,UAACC,MAAD,EAAY;AACpC,QAAIA,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACtBP,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB,eAArB;AACA,KAFD,MAEO;AACNR,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB,iFAArB;AACAjB,MAAAA,MAAM,CAACkB,IAAP,CAAY,iFAAZ;AACA;AACD,GAPF,EAQEC,KARF,CAQQ,UAACC,GAAD,EAAS;AACfpB,IAAAA,MAAM,CAACqB,KAAP,CAAaD,GAAb;AACAX,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBG,GAArB;AACA,GAXF;AAYA,CAbD;AAeAjB,MAAM,CAACI,GAAP,CAAW,mBAAX,EAAgC,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAChD,MAAMa,WAAW,GAAG;AAChBC,IAAAA,UAAU,EAAE,IADI;AAEhBC,IAAAA,QAAQ,EAAE;AAFM,GAApB;;AAKAC,wBAAGC,aAAH,GAAmBZ,IAAnB,CAAwB,YAAM;AAC1BQ,IAAAA,WAAW,CAACE,QAAZ,GAAuB,IAAvB;AACAf,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBgB,WAArB;AACH,GAHD,EAGGH,KAHH,CAGS,UAACC,GAAD,EAAS;AACdpB,IAAAA,MAAM,CAACqB,KAAP,CAAaD,GAAb;AACAE,IAAAA,WAAW,CAACF,GAAZ,GAAkBA,GAAlB;AACAX,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBgB,WAArB;AACH,GAPD;AAQH,CAdD;eAgBenB,M","sourceRoot":"start.js","sourcesContent":["import Logger from '../helpers/logger';\r\nimport { Router } from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport db from '../database/testDatabase';\r\nimport fm from '../helpers/fileManager';\r\n\r\nconst logger = Logger.getLogger('api');\r\nconst routes = Router();\r\n\r\nroutes.use(bodyParser.json());\r\n\r\nroutes.get('/', function (req, res) {\r\n\tres.status(200).json('Nothing to see here!');\r\n});\r\n\r\nroutes.post('/', function (req, res) {\r\n\tres.status(200).json('This is all good and all, but what do you want me to do with that data.');\r\n});\r\n\r\nroutes.get('/test-storage', function (req, res) {\r\n\tfm.testStorageAuth().then((result) => {\r\n\t\t\tif (result.length > 0) {\r\n\t\t\t\tres.status(200).send('Authenticated');\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).send('Unable to get Bucket List. This could be because of missing/invalid credentials');\r\n\t\t\t\tlogger.warn('Unable to get Bucket List. This could be because of missing/invalid credentials');\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tlogger.error(err);\r\n\t\t\tres.status(401).send(err);\r\n\t\t});\r\n});\r\n\r\nroutes.get('/check-connection', function (req, res) {\r\n    const testResults = {\r\n        connection: true,\r\n        database: false\r\n    };\r\n\r\n    db.checkDatabase().then(() => {\r\n        testResults.database = true;\r\n        res.status(200).json(testResults);\r\n    }).catch((err) => {\r\n        logger.error(err);\r\n        testResults.err = err;\r\n        res.status(500).json(testResults);\r\n    });\r\n});\r\n\r\nexport default routes;"],"file":"TestController.js"}