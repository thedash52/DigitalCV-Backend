{"version":3,"sources":["../../src/helpers/logger.js"],"names":["loggers","winston","Container","loggingWinston","LoggingWinston","Logger","defaultLog","level","debug","logLevel","format","combine","label","splat","timestamp","printf","info","JSON","stringify","message","transports","Console","exitOnError","add","get","has","logger","all","close"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,IAAIC,iBAAQC,SAAZ,EAAhB;AACA,IAAMC,cAAc,GAAG,IAAIC,8BAAJ,EAAvB,C,CAEA;;IAEqBC,M;;;;;;;;;2BACH;AACV,UAAMC,UAAU,GAAG;AACfC,QAAAA,KAAK,EAAEC,gBAAQ,OAAR,GAAkBC,gBADV;AAEfC,QAAAA,MAAM,EAAET,iBAAQS,MAAR,CAAeC,OAAf,CAAuBV,iBAAQS,MAAR,CAAeE,KAAf,CAAqB;AAChDA,UAAAA,KAAK,EAAE;AADyC,SAArB,CAAvB,EAEJX,iBAAQS,MAAR,CAAeG,KAAf,EAFI,EAEoBZ,iBAAQS,MAAR,CAAeI,SAAf,EAFpB,EAEgDb,iBAAQS,MAAR,CAAeK,MAAf,CAAsB,UAACC,IAAD;AAAA,2BAAaA,IAAI,CAACF,SAAlB,gBAAiCE,IAAI,CAACT,KAAtC,gBAAiDS,IAAI,CAACJ,KAAtD,eAAgEK,IAAI,CAACC,SAAL,CAAeF,IAAI,CAACG,OAApB,CAAhE;AAAA,SAAtB,CAFhD,CAFO;AAKfC,QAAAA,UAAU,EAAE,CACR,IAAInB,iBAAQmB,UAAR,CAAmBC,OAAvB,EADQ,EAERlB,cAFQ,CALG;AASfmB,QAAAA,WAAW,EAAE;AATE,OAAnB;AAYA,aAAOtB,OAAO,CAACuB,GAAR,CAAY,SAAZ,EAAuBjB,UAAvB,CAAP;AACH;;;8BAEgBM,K,EAAO;AACpB,UAAI,CAACA,KAAL,EAAY;AACR,eAAOZ,OAAO,CAACwB,GAAR,CAAY,SAAZ,CAAP;AACH,OAFD,MAEO,IAAIxB,OAAO,CAACyB,GAAR,CAAYb,KAAZ,CAAJ,EAAwB;AAC3B,eAAOZ,OAAO,CAACwB,GAAR,CAAYZ,KAAZ,CAAP;AACH,OAFM,MAEA;AACH,eAAO,KAAP;AACH;AACJ;;;iCAEmBA,K,EAAO;AACvB,UAAMc,MAAM,GAAG;AACXnB,QAAAA,KAAK,EAAEC,gBAAQ,OAAR,GAAkBC,gBADd;AAEXC,QAAAA,MAAM,EAAET,iBAAQS,MAAR,CAAeC,OAAf,CAAuBV,iBAAQS,MAAR,CAAeE,KAAf,CAAqB;AAChDA,UAAAA,KAAK,EAAEA;AADyC,SAArB,CAAvB,EAEJX,iBAAQS,MAAR,CAAeG,KAAf,EAFI,EAEoBZ,iBAAQS,MAAR,CAAeI,SAAf,EAFpB,EAEgDb,iBAAQS,MAAR,CAAeK,MAAf,CAAsB,UAAAC,IAAI;AAAA,2BAAOA,IAAI,CAACF,SAAZ,gBAA2BE,IAAI,CAACT,KAAhC,gBAA2CS,IAAI,CAACJ,KAAhD,eAA0DI,IAAI,CAACG,OAA/D;AAAA,SAA1B,CAFhD,CAFG;AAKXC,QAAAA,UAAU,EAAE,CACR,IAAInB,iBAAQmB,UAAR,CAAmBC,OAAvB,EADQ,EAERlB,cAFQ,CALD;AASXmB,QAAAA,WAAW,EAAE;AATF,OAAf;AAYA,aAAOtB,OAAO,CAACuB,GAAR,CAAYX,KAAZ,EAAmBc,MAAnB,CAAP;AACH;;;iCAEmBd,K,EAAOe,G,EAAK;AAC5BA,MAAAA,GAAG,GAAGA,GAAG,GAAGA,GAAH,GAAS,KAAlB;;AAEA,UAAIf,KAAK,IAAI,CAACe,GAAd,EAAmB;AACf3B,QAAAA,OAAO,CAAC4B,KAAR,CAAchB,KAAd;AACH,OAFD,MAEO,IAAIe,GAAJ,EAAS;AACZ3B,QAAAA,OAAO,CAAC4B,KAAR;AACH;AACJ","sourceRoot":"start.js","sourcesContent":["import { debug, logLevel } from '../config/config';\r\nimport { LoggingWinston } from '@google-cloud/logging-winston';\r\n//import path from 'path';\r\nimport winston from 'winston';\r\n\r\nconst loggers = new winston.Container();\r\nconst loggingWinston = new LoggingWinston();\r\n\r\n//const logPath = path.join(__dirname, '..', 'logs');\r\n\r\nexport default class Logger {\r\n    static init() {\r\n        const defaultLog = {\r\n            level: debug ? 'debug' : logLevel,\r\n            format: winston.format.combine(winston.format.label({\r\n                label: 'Default'\r\n            }), winston.format.splat(), winston.format.timestamp(), winston.format.printf((info) => `${info.timestamp} - ${info.level}: (${info.label}) ${JSON.stringify(info.message)}`)),\r\n            transports: [\r\n                new winston.transports.Console(),\r\n                loggingWinston\r\n            ],\r\n            exitOnError: false\r\n        };\r\n\r\n        return loggers.add('default', defaultLog);\r\n    }\r\n\r\n    static getLogger(label) {\r\n        if (!label) {\r\n            return loggers.get('default');\r\n        } else if (loggers.has(label)) {\r\n            return loggers.get(label);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static createLogger(label) {\r\n        const logger = {\r\n            level: debug ? 'debug' : logLevel,\r\n            format: winston.format.combine(winston.format.label({\r\n                label: label\r\n            }), winston.format.splat(), winston.format.timestamp(), winston.format.printf(info => `${info.timestamp} - ${info.level}: (${info.label}) ${info.message}`)),\r\n            transports: [\r\n                new winston.transports.Console(),\r\n                loggingWinston\r\n            ],\r\n            exitOnError: false\r\n        };\r\n\r\n        return loggers.add(label, logger);\r\n    }\r\n\r\n    static removeLogger(label, all) {\r\n        all = all ? all : false;\r\n\r\n        if (label && !all) {\r\n            loggers.close(label);\r\n        } else if (all) {\r\n            loggers.close();\r\n        }\r\n    }\r\n}"],"file":"logger.js"}