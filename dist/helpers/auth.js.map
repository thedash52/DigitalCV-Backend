{"version":3,"sources":["../../src/helpers/auth.js"],"names":["Strategy","passportJwt","extract","ExtractJwt","Auth","params","process","env","NODE_ENV","debug","secretOrKey","JWT_SECRET","jwtFromRequest","fromAuthHeaderAsBearerToken","ignoreExpiration","jwtSecret","strategy","payload","done","db","authenticate","id","username","then","user","catch","err","Error","passport","use","initialize","session"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;IAEQA,Q,GAAkCC,oB,CAAlCD,Q;IAAsBE,O,GAAYD,oB,CAAxBE,U;;IAEGC,I;;;AACjB,kBAAc;AAAA;;AACV,QAAIC,MAAM,GAAG,EAAb;;AAEA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACC,aAA9C,EAAqD;AACjDJ,MAAAA,MAAM,GAAG;AACLK,QAAAA,WAAW,EAAEJ,OAAO,CAACC,GAAR,CAAYI,UADpB;AAELC,QAAAA,cAAc,EAAEV,OAAO,CAACW,2BAAR,EAFX;AAGLC,QAAAA,gBAAgB,EAAE;AAHb,OAAT;AAKH,KAND,MAMO;AACHT,MAAAA,MAAM,GAAG;AACLK,QAAAA,WAAW,EAAEK,iBADR;AAELH,QAAAA,cAAc,EAAEV,OAAO,CAACW,2BAAR,EAFX;AAGLC,QAAAA,gBAAgB,EAAE;AAHb,OAAT;AAKH;;AAED,QAAME,QAAQ,GAAG,IAAIhB,QAAJ,CAAaK,MAAb,EAAqB,UAAUY,OAAV,EAAmBC,IAAnB,EAAyB;AAC3DC,4BAAGC,YAAH,CAAgBH,OAAO,CAACI,EAAxB,EAA4BJ,OAAO,CAACK,QAApC,EAA8CC,IAA9C,CAAmD,UAACC,IAAD,EAAU;AACzD,eAAON,IAAI,CAAC,IAAD,EAAOM,IAAP,CAAX;AACH,OAFD,EAEGC,KAFH,CAES,UAACC,GAAD,EAAS;AACd,YAAIA,GAAJ,EAAS;AACL,iBAAOR,IAAI,CAAC,IAAIS,KAAJ,CAAUD,GAAV,CAAD,EAAiB,KAAjB,CAAX;AACH,SAFD,MAEO;AACH,iBAAOR,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACH;AACJ,OARD;AASH,KAVgB,CAAjB;;AAYAU,sBAASC,GAAT,CAAab,QAAb;AACH;;;;iCAEY;AACT,aAAOY,kBAASE,UAAT,EAAP;AACH;;;mCAEc;AACX,aAAOF,kBAASR,YAAT,CAAsB,KAAtB,EAA6B;AAChCW,QAAAA,OAAO,EAAE;AADuB,OAA7B,CAAP;AAGH","sourceRoot":"start.js","sourcesContent":["/*eslint-disable class-methods-use-this*/\r\nimport { debug, jwtSecret } from '../config/config';\r\nimport db from '../database/authDatabase';\r\nimport passport from 'passport';\r\nimport passportJwt from 'passport-jwt';\r\n\r\nconst { Strategy, ExtractJwt: extract } = passportJwt;\r\n\r\nexport default class Auth {\r\n    constructor() {\r\n        let params = {};\r\n\r\n        if (process.env.NODE_ENV === 'production' || !debug) {\r\n            params = {\r\n                secretOrKey: process.env.JWT_SECRET,\r\n                jwtFromRequest: extract.fromAuthHeaderAsBearerToken(),\r\n                ignoreExpiration: false\r\n            };\r\n        } else {\r\n            params = {\r\n                secretOrKey: jwtSecret,\r\n                jwtFromRequest: extract.fromAuthHeaderAsBearerToken(),\r\n                ignoreExpiration: true\r\n            };\r\n        }\r\n\r\n        const strategy = new Strategy(params, function (payload, done) {\r\n            db.authenticate(payload.id, payload.username).then((user) => {\r\n                return done(null, user);\r\n            }).catch((err) => {\r\n                if (err) {\r\n                    return done(new Error(err), false);\r\n                } else {\r\n                    return done(null, false);\r\n                }\r\n            });\r\n        });\r\n    \r\n        passport.use(strategy);\r\n    }\r\n\r\n    initialize() {\r\n        return passport.initialize();\r\n    }\r\n\r\n    authenticate() {\r\n        return passport.authenticate('jwt', {\r\n            session: false\r\n        });\r\n    }\r\n}"],"file":"auth.js"}