{"version":3,"sources":["../../src/helpers/database.js"],"names":["DB","options","process","env","NODE_ENV","debug","connectionLimit","user","DB_USER","password","DB_PASS","database","DB_DATABASE","host","DB_HOST","databaseDebug","pool","db","createPool","col","table","join","conditions","groupby","having","orderby","limit","Promise","resolve","reject","type","link","getConnection","err","conn","query","errorResult","result","release","once","error","data","length","updateData","i","values"],"mappings":"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","sourceRoot":"start.js","sourcesContent":["import { databaseDebug, debug } from '../config/config';\r\nimport db from 'mysql';\r\n\r\nexport default class DB {\r\n\r\n    constructor() {\r\n        let options = {};\r\n\r\n        if (process.env.NODE_ENV === 'production' || !debug) {\r\n            options = {\r\n                connectionLimit: 100,\r\n                user: process.env.DB_USER,\r\n                password: process.env.DB_PASS,\r\n                database: process.env.DB_DATABASE,\r\n                host: process.env.DB_HOST\r\n            };\r\n        } else {\r\n            options = databaseDebug;\r\n        }\r\n\r\n        this.pool = db.createPool(options);\r\n    }\r\n\r\n    select({\r\n        col,\r\n        table,\r\n        join,\r\n        conditions,\r\n        groupby,\r\n        having,\r\n        orderby,\r\n        limit\r\n    }) {\r\n        return new Promise((resolve, reject) => {\r\n            conditions = conditions ? 'WHERE ' + conditions : '';\r\n            groupby = groupby ? 'GROUP BY ' + groupby : '';\r\n            having = having ? 'HAVING ' + having : '';\r\n            orderby = orderby ? 'ORDER BY ' + orderby : '';\r\n            join = join ? join.type + ' JOIN ' + join.table + ' ON ' + join.link : '';\r\n            limit = limit ? 'LIMIT ' + limit : '';\r\n            this.pool.getConnection((err, conn) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                conn.query(`SELECT ${col} FROM ${table} ${join} ${conditions} ${groupby} ${having} ${orderby} ${limit}`, (errorResult, result) => {\r\n                    conn.release();\r\n                    if (!errorResult) {\r\n                        resolve(result);\r\n                    } else {\r\n                        reject(errorResult);\r\n                    }\r\n                });\r\n                conn.once('error', (error) => {\r\n                    conn.release();\r\n                    reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    insert({\r\n        table,\r\n        col,\r\n        data\r\n    }) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pool.getConnection((err, conn) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                conn.query(`INSERT INTO '${table}' (${col}) VALUES (${data})`, (errorResult, result) => {\r\n                    conn.release();\r\n                    if (!errorResult) {\r\n                        resolve(result);\r\n                    } else {\r\n                        reject(errorResult);\r\n                    }\r\n                });\r\n                conn.once('error', (error) => {\r\n                    conn.release();\r\n                    reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    bulkInsert({\r\n        table,\r\n        col,\r\n        data\r\n    }) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pool.getConnection((err, conn) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                conn.query(`INSERT INTO '${table}' (${col}) VALUES ?`, [data], (errorResult, result) => {\r\n                    conn.release();\r\n                    if (!errorResult) {\r\n                        resolve(result);\r\n                    } else {\r\n                        reject(errorResult);\r\n                    }\r\n                });\r\n                conn.once('error', (error) => {\r\n                    conn.release();\r\n                    reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    update({\r\n        table,\r\n        col,\r\n        data,\r\n        conditions\r\n    }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (conditions) {\r\n                reject('Attempting to update all records. Attempt being seen as hack. Attempt Blocked.');\r\n            } else {\r\n                if (data.length !== col.length) {\r\n                    reject('Invalid Query. Number of values to be updated does not match number of columns to be updated.');\r\n                } else {\r\n                    var updateData;\r\n                    for (let i = 0; i < data.length; i++) {\r\n                        if (i == data.length - 1) {\r\n                            updateData += col[i] + ' = ' + data[i] + ', ';\r\n                        } else {\r\n                            updateData += col[i] + ' = ' + data[i];\r\n                        }\r\n                    }\r\n                    this.pool.getConnection((err, conn) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        conn.query(`UPDATE ${table} SET ${updateData} WHERE ${conditions}`, (errorResult, result) => {\r\n                            conn.release();\r\n                            if (!errorResult) {\r\n                                resolve(result);\r\n                            } else {\r\n                                reject(errorResult);\r\n                            }\r\n                        });\r\n                        conn.once('error', (error) => {\r\n                            conn.release();\r\n                            reject(error);\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    delete({\r\n        table,\r\n        conditions,\r\n        values\r\n    }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (conditions) {\r\n                reject('Attempting to delete all records. Attempt being seen as hack. Now blocking attempt.');\r\n            } else {\r\n                this.pool.getConnection((err, conn) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    if (values) {\r\n                        conn.query(`DELETE FROM '${table}' WHERE ${conditions}`, values, (errorResult, result) => {\r\n                            conn.release();\r\n                            if (!errorResult) {\r\n                                resolve(result);\r\n                            } else {\r\n                                reject(errorResult);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        conn.query(`DELETE FROM '${table}' WHERE ${conditions}`, (errorResult, result) => {\r\n                            conn.release();\r\n                            if (!errorResult) {\r\n                                resolve(result);\r\n                            } else {\r\n                                reject(errorResult);\r\n                            }\r\n                        });\r\n                    }\r\n                    conn.once('error', (error) => {\r\n                        conn.release();\r\n                        reject(error);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    showTables() {\r\n        return new Promise((resolve, reject) => {\r\n            this.pool.getConnection((err, conn) => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                conn.query(\"SHOW TABLES\", function (errorResult, result) {\r\n                    conn.release();\r\n\r\n                    if (!errorResult) {\r\n                        if (result.length > 1) {\r\n                            return resolve(result);\r\n                        } else {\r\n                            return reject(\"Database has not been setup. Please run migrations.\");\r\n                        }\r\n                    } else {\r\n                        reject(err)\r\n                    }\r\n                });\r\n\r\n                conn.once('error', function (error) {\r\n                    return reject(error);\r\n                });\r\n            });\r\n        })\r\n    }\r\n}"],"file":"database.js"}