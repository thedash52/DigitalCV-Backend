{"version":3,"sources":["../../src/database/authDatabase.js"],"names":["logger","Logger","getLogger","db","database","functions","login","username","password","select","col","table","then","res","i","length","Promise","resolve","type","results","reject","method","err","catch","error","authenticate","id","conditions","limit"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,MAAM,GAAGC,gBAAOC,SAAP,EAAf;;AACA,IAAMC,EAAE,GAAG,IAAIC,iBAAJ,EAAX;AAEA,IAAMC,SAAS,GAAG,EAAlB;;AAEAA,SAAS,CAACC,KAAV,GAAkB,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAC5C,SAAOL,EAAE,CAACM,MAAH,CAAU;AAAEC,IAAAA,GAAG,EAAE,GAAP;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GAAV,EAAsCC,IAAtC,CAA2C,UAACC,GAAD,EAAS;AACvD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,UAAID,GAAG,CAACC,CAAD,CAAH,CAAOP,QAAP,KAAoBA,QAApB,IAAgCM,GAAG,CAACC,CAAD,CAAH,CAAON,QAAP,KAAoBA,QAAxD,EAAkE;AAC9D,eAAOQ,OAAO,CAACC,OAAR,CAAgB;AACnBC,UAAAA,IAAI,EAAE,MADa;AAEnBC,UAAAA,OAAO,EAAEN,GAAG,CAACC,CAAD;AAFO,SAAhB,CAAP;AAIH;;AAED,UAAIA,CAAC,IAAKD,GAAG,CAACE,MAAJ,GAAa,CAAvB,EAA2B;AACvB,eAAOC,OAAO,CAACI,MAAR,CAAe;AAClBC,UAAAA,MAAM,EAAE,OADU;AAElBC,UAAAA,GAAG,EAAE;AAFa,SAAf,CAAP;AAIH;AACJ;AACJ,GAhBM,EAgBJC,KAhBI,CAgBE,UAACD,GAAD,EAAS;AACdtB,IAAAA,MAAM,CAACwB,KAAP,2BAAgCF,GAAhC;AAEA,WAAON,OAAO,CAACI,MAAR,CAAe;AAClBC,MAAAA,MAAM,EAAE,OADU;AAElBC,MAAAA,GAAG,EAAEA;AAFa,KAAf,CAAP;AAIH,GAvBM,CAAP;AAwBH,CAzBD;;AA2BAjB,SAAS,CAACoB,YAAV,GAAyB,UAAUC,EAAV,EAAcnB,QAAd,EAAwB;AAC7C,SAAOJ,EAAE,CAACM,MAAH,CAAU;AAAEC,IAAAA,GAAG,EAAE,GAAP;AAAYC,IAAAA,KAAK,EAAE,MAAnB;AAA2BgB,IAAAA,UAAU,kBAAWD,EAAX,+BAAkCnB,QAAlC,MAArC;AAAoFqB,IAAAA,KAAK,EAAE;AAA3F,GAAV,EAA2GhB,IAA3G,CAAgH,UAACC,GAAD,EAAS;AAC5H,QAAIA,GAAG,CAACE,MAAJ,GAAa,CAAjB,EAAoB;AAChB,aAAOC,OAAO,CAACC,OAAR,CAAgB;AACnBC,QAAAA,IAAI,EAAE,OADa;AAEnBC,QAAAA,OAAO,EAAEN,GAAG,CAAC,CAAD;AAFO,OAAhB,CAAP;AAIH,KALD,MAKO;AACH,aAAOG,OAAO,CAACI,MAAR,CAAe;AAClBC,QAAAA,MAAM,EAAE,cADU;AAElBC,QAAAA,GAAG,EAAE;AAFa,OAAf,CAAP;AAIH;AACJ,GAZM,EAYJC,KAZI,CAYE,UAACD,GAAD,EAAS;AACdtB,IAAAA,MAAM,CAACwB,KAAP,2BAAgCF,GAAhC;AAEA,WAAON,OAAO,CAACI,MAAR,CAAe;AAClBC,MAAAA,MAAM,EAAE,cADU;AAElBC,MAAAA,GAAG,EAAEA;AAFa,KAAf,CAAP;AAIH,GAnBM,CAAP;AAoBH,CArBD;;eAuBejB,S","sourceRoot":"start.js","sourcesContent":["import Logger from '../helpers/logger';\r\nimport database from '../helpers/database';\r\n\r\nconst logger = Logger.getLogger();\r\nconst db = new database();\r\n\r\nconst functions = {};\r\n\r\nfunctions.login = function (username, password) {\r\n    return db.select({ col: '*', table: 'user'}).then((res) => {\r\n        for (let i = 0; i < res.length; i++) {\r\n            if (res[i].username === username && res[i].password === password) {\r\n                return Promise.resolve({\r\n                    type: 'user',\r\n                    results: res[i]\r\n                });\r\n            }\r\n\r\n            if (i == (res.length - 1)) {\r\n                return Promise.reject({\r\n                    method: 'login',\r\n                    err: 'Invalid Username and/or Password.'\r\n                });\r\n            }\r\n        }\r\n    }).catch((err) => {\r\n        logger.error(`Database error: ${err}`);\r\n\r\n        return Promise.reject({\r\n            method: 'login',\r\n            err: err\r\n        });\r\n    });\r\n}\r\n\r\nfunctions.authenticate = function (id, username) {\r\n    return db.select({ col: '*', table: 'user', conditions: `id = '${id}' AND username = '${username}'`, limit: '1'}).then((res) => {\r\n        if (res.length > 0) {\r\n            return Promise.resolve({\r\n                type: 'basic',\r\n                results: res[0]\r\n            });\r\n        } else {\r\n            return Promise.reject({\r\n                method: 'authenticate',\r\n                err: 'Error Authenticating User. Please try again.'\r\n            });\r\n        }\r\n    }).catch((err) => {\r\n        logger.error(`Database Error: ${err}`);\r\n\r\n        return Promise.reject({\r\n            method: 'authenticate',\r\n            err: err\r\n        });\r\n    });\r\n}\r\n\r\nexport default functions;\r\n"],"file":"authDatabase.js"}