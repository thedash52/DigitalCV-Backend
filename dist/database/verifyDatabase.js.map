{"version":3,"sources":["../../src/database/verifyDatabase.js"],"names":["CLOUD_BUCKET","process","env","logger","Logger","getLogger","db","database","functions","verifyBasic","basicData","select","col","table","then","res","show_referees","show_repositories","basic","avatar","folder_id","avatar_img","profile","profile_img","JSON","stringify","Promise","resolve","type","result","catch","err","error","reject","method","verifyPhone","phoneData","incorrectData","r","length","matchingRecord","p","test","id","user","type_id","number","verifySocial","socialData","s","link","verifySkill","skillData","category","details","verifyTech","techData","t","image","img","name","detail","verifyRepo","repoData","re","verifyExperience","experienceData","e","title","location","description","start_date","Date","end_date","current","verifyEducation","educationData","course","school","year","verifyPapers","paperData","code","grade","course_id","verifyAchievements","achievementData","a","where","what_why","whatWhy","verifyInterests","interestData","i"],"mappings":"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","sourceRoot":"start.js","sourcesContent":["import Logger from '../helpers/logger';\r\nimport database from '../helpers/database';\r\n\r\nconst { CLOUD_BUCKET } = process.env;\r\n\r\nconst logger = Logger.getLogger();\r\nconst db = new database();\r\n\r\nconst functions = {};\r\n\r\nfunctions.verifyBasic = function (basicData) {\r\n    if (basicData) {\r\n        return db.select({ col: '*', table: 'basic' }).then((res) => {\r\n            //eslint-disable-next-line camelcase\r\n            basicData.show_referees = basicData.show_referees ? 1 : 0;\r\n            //eslint-disable-next-line camelcase\r\n            basicData.show_repositories = basicData.show_repositories ? 1 : 0;\r\n\r\n            const { 0: basic} = res;\r\n\r\n            basic.avatar = `https://storage.googleapis.com/${CLOUD_BUCKET}/${basicData.folder_id}/${basicData.avatar_img}`;\r\n            basic.profile = `https://storage.googleapis.com/${CLOUD_BUCKET}/${basicData.folder_id}/${basicData.profile_img}`;\r\n\r\n            if (JSON.stringify(basic) !== JSON.stringify(basicData)) {\r\n                return Promise.resolve({\r\n                    type: 'basic',\r\n                    result: false\r\n                });\r\n            } else {\r\n                return Promise.resolve({\r\n                    type: 'basic',\r\n                    result: true\r\n                });\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyBasic',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyBasic',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyPhone = function (phoneData) {\r\n    if (phoneData) {\r\n        return db.select({ col: '*', table: 'phone' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let p = 0; p < phoneData.length; p++) {\r\n                    const test = {\r\n                        id: phoneData[p].id,\r\n                        user: phoneData[p].user,\r\n                        type_id: phoneData[p].type.id,\r\n                        number: phoneData[p].number\r\n                    };\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (p == (phoneData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'phone',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'phone',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyPhone',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyPhone',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifySocial = function (socialData) {\r\n    if (socialData) {\r\n        return db.select({ col: '*', table: 'social' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let s = 0; s < socialData.length; s++) {\r\n                    const test = {\r\n                        id: socialData[s].id,\r\n                        user: socialData[s].user,\r\n                        type_id: socialData[s].type.id,\r\n                        link: socialData[s].link\r\n                    };\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (s == (socialData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'social',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'social',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifySocial',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifySocial',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifySkill = function (skillData) {\r\n    if (skillData) {\r\n        return db.select({ col: '*', table: 'skill' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let s = 0; s < skillData.length; s++) {\r\n                    const test = {\r\n                        id: skillData[s].id,\r\n                        user: skillData[s].user,\r\n                        category: skillData[s].category,\r\n                        details: skillData[s].details\r\n                    };\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (s == (skillData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'skill',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'skill',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifySkill',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifySkill',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyTech = function (techData) {\r\n    if (techData) {\r\n        return db.select({ col: '*', table: 'technology' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let t = 0; t < techData.length; t++) {\r\n                    const test = {\r\n                        id: techData[t].id,\r\n                        user: techData[t].user,\r\n                        image: techData[t].img,\r\n                        name: techData[t].name,\r\n                        detail: techData[t].detail,\r\n                        link: techData[t].link,\r\n                        category: techData[t].category\r\n                    }\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (t == (techData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'technology',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'technology',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyTech',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyTech',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyRepo = function (repoData) {\r\n    if (repoData) {\r\n        return db.select({ col: '*', table: 'repository' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let re = 0; re < repoData.length; re++) {\r\n                    const test = {\r\n                        id: repoData[re].id,\r\n                        user: repoData[re].user,\r\n                        type_id: repoData[re].type.id,\r\n                        link: repoData[re].link\r\n                    }\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (re == (repoData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'repository',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'repository',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyRepo',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyRepo',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyExperience = function (experienceData) {\r\n    if (experienceData) {\r\n        return db.select({ col: '*', table: 'experience' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let e = 0; e < experienceData.length; e++) {\r\n                    const test = {\r\n                        id: experienceData[e].id,\r\n                        user: experienceData[e].user,\r\n                        image: experienceData[e].image,\r\n                        title: experienceData[e].title,\r\n                        location: experienceData[e].location,\r\n                        description: experienceData[e].description,\r\n                        start_date: new Date(experienceData[e].start_date),\r\n                        end_date: new Date(experienceData[e].end_date),\r\n                        current: experienceData[e].current ? 1 : 0\r\n                    }\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (e == (experienceData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'experience',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'experience',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyExperience',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyExperience',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyEducation = function (educationData) {\r\n    if (educationData) {\r\n        return db.select({ col: '*', table: 'education' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let e = 0; e < educationData.length; e++) {\r\n                    const test = {\r\n                        id: educationData[e].id,\r\n                        user: educationData[e].user,\r\n                        image: educationData[e].img,\r\n                        course: educationData[e].course,\r\n                        school: educationData[e].school,\r\n                        link: educationData[e].link,\r\n                        year: educationData[e].year\r\n                    }\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (e == (educationData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'education',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'education',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyEducation',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyEducation',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyPapers = function (paperData) {\r\n    if (paperData) {\r\n        return db.select({ col: '*', table: 'paper' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let p = 0; p < paperData.length; p++) {\r\n                    const test = {\r\n                        id: paperData[p].id,\r\n                        code: paperData[p].code,\r\n                        name: paperData[p].name,\r\n                        details: paperData[p].detail,\r\n                        grade: paperData[p].grade,\r\n                        course_id: paperData[p].course\r\n                    }\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (p == (paperData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'paper',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'paper',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyPapers',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyPapers',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyAchievements = function (achievementData) {\r\n    if (achievementData) {\r\n        return db.select({ col: '*', table: 'achievement' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let a = 0; a < achievementData.length; a++) {\r\n                    const test = {\r\n                        id: achievementData[a].id,\r\n                        user: achievementData[a].user,\r\n                        name: achievementData[a].name,\r\n                        where: achievementData[a].where,\r\n                        what_why: achievementData[a].whatWhy\r\n                    }\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (a == (achievementData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'achievement',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'achievement',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyAchievements',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyAchievements',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nfunctions.verifyInterests = function (interestData) {\r\n    if (interestData) {\r\n        return db.select({ col: '*', table: 'interest' }).then((res) => {\r\n            let incorrectData = false;\r\n\r\n            for (let r = 0; r < res.length; r++) {\r\n                let matchingRecord = false;\r\n\r\n                for (let i = 0; i < interestData.length; i++) {\r\n                    const test = {\r\n                        id: interestData[i].id,\r\n                        user: interestData[i].user,\r\n                        image: interestData[i].img,\r\n                        name: interestData[i].name\r\n                    }\r\n\r\n                    if (JSON.stringify(res[r]) == JSON.stringify(test)) {\r\n                        matchingRecord = true;\r\n                    }\r\n\r\n                    if (i == (interestData.length - 1)) {\r\n                        if (!matchingRecord) {\r\n                            incorrectData = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (r == (res.length - 1)) {\r\n                    if (incorrectData) {\r\n                        return Promise.resolve({\r\n                            type: 'interest',\r\n                            result: false\r\n                        });\r\n                    } else {\r\n                        return Promise.resolve({\r\n                            type: 'interest',\r\n                            result: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch((err) => {\r\n            logger.error(`Database error: ${err}`);\r\n    \r\n            return Promise.reject({\r\n                method: 'verifyInterests',\r\n                err: err\r\n            });\r\n        });\r\n    } else {\r\n        logger.error('Data missing. Failed data verification');\r\n\r\n        return Promise.reject({\r\n            method: 'verifyInterests',\r\n            err: 'Data missing. Failed data verification'\r\n        });\r\n    }\r\n}\r\n\r\nexport default functions;\r\n"],"file":"verifyDatabase.js"}