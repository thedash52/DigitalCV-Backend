{"version":3,"sources":["../../src/database/testDatabase.js"],"names":["logger","Logger","getLogger","db","database","functions","checkDatabase","tables","showTables","then","res","numTables","migrationTableRegex","RegExp","i","length","tableName","test","foundTable","r","missingTables","t","tableFound","n","testingTable","push","error","Promise","reject","method","err","resolve","type","results","catch"],"mappings":"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","sourceRoot":"start.js","sourcesContent":["import Logger from '../helpers/logger';\r\nimport database from '../helpers/database';\r\n\r\nconst logger = Logger.getLogger();\r\nconst db = new database();\r\n\r\nconst functions = {};\r\n\r\nfunctions.checkDatabase = function () {\r\n    const tables = [\r\n        'achievement',\r\n        'basic',\r\n        'education',\r\n        'experience',\r\n        'interest',\r\n        'paper',\r\n        'phone',\r\n        'repository',\r\n        'skill',\r\n        'social',\r\n        'technology',\r\n        'type',\r\n        'user'\r\n    ]\r\n\r\n    //eslint-disable-next-line max-statements\r\n    return db.showTables().then((res) => {\r\n        let numTables = 0;\r\n        const migrationTableRegex = new RegExp('(.*)mysql_migrations(.*)');\r\n\r\n        for (let i = 0; i < res.length; i++) {\r\n            const tableName = res[i]['Tables_in_digitalcv']\r\n\r\n            if (!migrationTableRegex.test(tableName)) {\r\n                let foundTable = false;\r\n\r\n                for (let r = 0; r < tables.length; r++) {\r\n                    if (tableName == tables[r]) {\r\n                        foundTable = true;\r\n                    }\r\n\r\n                    if (r == (tables.length - 1)) {\r\n                        //eslint-disable-next-line max-depth\r\n                        if (foundTable) {\r\n                            numTables += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (i == (res.length - 1)) {\r\n                if (numTables != tables.length) {\r\n                    const missingTables = [];\r\n\r\n                    for (let t = 0; t < tables.length; t++) {\r\n                        let tableFound = false;\r\n\r\n                        //eslint-disable-next-line max-depth\r\n                        for (let n = 0; n < res.length; n++) {\r\n                            const testingTable = res[n]['Tables_in_digitalcv'];\r\n                            //eslint-disable-next-line max-depth\r\n                            if (tables[t] == testingTable) {\r\n                                tableFound = true;\r\n                            }\r\n\r\n                            //eslint-disable-next-line max-depth\r\n                            if (n == (res.length - 1)) {\r\n                                //eslint-disable-next-line max-depth\r\n                                if (!tableFound) {\r\n                                    missingTables.push(res[n]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //eslint-disable-next-line max-depth\r\n                        if (t == (tables.length - 1)) {\r\n                            logger.error(`Database setup incorrectly. Missing the following tables: ${missingTables}`);\r\n\r\n                            return Promise.reject({\r\n                                method: 'checkDatabase',\r\n                                err: `Database setup incorrectly. Missing the following tables: ${missingTables}`\r\n                            });\r\n                        }\r\n                    }\r\n                } else {\r\n                    return Promise.resolve({\r\n                        type: 'databaseConnection',\r\n                        results: true\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }).catch((err) => {\r\n        logger.error(`Database Error: ${err}`);\r\n\r\n        return Promise.reject({\r\n            method: 'checkDatabase',\r\n            err: err\r\n        });\r\n    })\r\n}\r\n\r\nexport default functions;\r\n"],"file":"testDatabase.js"}